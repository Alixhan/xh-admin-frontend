version: "3.9"
# 有个细节还是说下：方便新人了解，docker compose up会创建的默认的网络，网络的名称为 ”当前compose文件所在文件夹名称_default“，例如此配置文件在data目录下，所以默认网络为 data_default
# 设置COMPOSE_PROJECT_NAME环境变量可以定制默认网络名称
# 在同一个compose配置文件中启动的所有容器默认会加入同一个网络，so,容器间互相访问可以直接通过容器container_name访问，无需额外的配置
services:
  mysql:
    image: mysql:8.0-debian
    container_name: mysql8
    ports:
      - "3306:3306"
    volumes:
      - ./mysql/data:/var/lib/mysql
      # mysql配置文件
      - ./mysql/my.cnf:/etc/my.cnf
      # 把需要初始化的sql放在这个目录下，挂载至容器，这样容器创建时会自动执行此目录的所有sql文件，执行数据库的初始化
      - ./mysql/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_PASSWORD}
    restart: always
  redis:
    image: redis:7.0-alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - ./redis/data:/data
      - ./redis/redis.conf:/etc/redis/redis.conf
    restart: unless-stopped
    command: redis-server --appendonly yes
  minio:
    container_name: minio
    image: quay.io/minio/minio:latest
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - ./minio/data:/data
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_PASSWORD}
    restart: always
  jenkins:
    image: jenkins/jenkins:lts-jdk21
    container_name: jenkins
    # 用root用户启动，因为jenkins需要调用宿主机的 docker 会有权限问题，怕麻烦直接root省事，但要注意网络安全
    user: root
    ports:
      - "8080:8080"
    volumes:
      - ./jenkins/jenkins_home:/var/jenkins_home
      - /etc/localtime:/etc/localtime
      # 映射宿主机docker，这样再容器内部执行docker就等于在宿主机执行
      - /var/run/docker.sock:/var/run/docker.sock
      - /usr/bin/docker:/bin/docker
    environment:
      JAVA_OPTS: "-Xmx256m -Xms256m"
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 2G
    restart: always
    privileged: true
  nginx:
    image: nginx:1.24.0-alpine-slim
    container_name: nginx
    network_mode: host
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/cer:/etc/nginx/cer:ro
      - ./nginx/html:/usr/share/nginx/html:ro
    restart: always
  xxl-job-admin:
    image: xuxueli/xxl-job-admin:3.1.0
    container_name: xxl-job-admin
    ports:
      - "8088:8080"
    volumes:
      - ./xxl-job:/data/applogs
    environment:
      PARAMS: "--spring.datasource.url=jdbc:mysql://mysql8:3306/xxl_job?Unicode=true&characterEncoding=UTF-8 --spring.datasource.username=root --spring.datasource.password=${MYSQL_PASSWORD}"
    depends_on:
      - mysql
    restart: always
  nacos:
    image: nacos/nacos-server:v3.0.1-slim
    container_name: nacos
    environment:
      MODE: "standalone"
      SPRING_DATASOURCE_PLATFORM: "mysql"
      MYSQL_SERVICE_HOST: mysql8
      MYSQL_SERVICE_PORT: "3306"
      MYSQL_SERVICE_DB_NAME: "nacos_config"
      MYSQL_SERVICE_USER: "root"
      MYSQL_SERVICE_PASSWORD: ${MYSQL_PASSWORD}
      NACOS_AUTH_ENABLE: "true"
      NACOS_AUTH_IDENTITY_KEY: "xh"
      NACOS_AUTH_IDENTITY_VALUE: "xh666"
      NACOS_AUTH_TOKEN: "dlfkgjer78234uskl23ioufsjlk34r9028rf0wu24078woekrjelwriufio"
      JVM_XMS: "256m"
      JVM_XMX: "256m"
      JVM_XMN: "64m"
    volumes:
      - ./nacos/logs:/home/nacos/logs
    ports:
      - "18080:8080"
      - "8848:8848"
      - "9848:9848"
    depends_on:
      - mysql
    restart: always
    deploy:
      resources:
        limits:
          memory: 1G
